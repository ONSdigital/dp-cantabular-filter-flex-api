// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-cantabular-filter-flex-api/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"net/http"
	"sync"
)

// Ensure, that HealthCheckerMock does implement service.HealthChecker.
// If this is not the case, regenerate this file with moq.
var _ service.HealthChecker = &HealthCheckerMock{}

// HealthCheckerMock is a mock implementation of service.HealthChecker.
//
// 	func TestSomethingThatUsesHealthChecker(t *testing.T) {
//
// 		// make and configure a mocked service.HealthChecker
// 		mockedHealthChecker := &HealthCheckerMock{
// 			AddAndGetCheckFunc: func(name string, checker healthcheck.Checker) (*healthcheck.Check, error) {
// 				panic("mock out the AddAndGetCheck method")
// 			},
// 			HandlerFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
// 				panic("mock out the Handler method")
// 			},
// 			StartFunc: func(contextMoqParam context.Context)  {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func()  {
// 				panic("mock out the Stop method")
// 			},
// 			SubscribeFunc: func(subscriber healthcheck.Subscriber, checks ...*healthcheck.Check)  {
// 				panic("mock out the Subscribe method")
// 			},
// 		}
//
// 		// use mockedHealthChecker in code that requires service.HealthChecker
// 		// and then make assertions.
//
// 	}
type HealthCheckerMock struct {
	// AddAndGetCheckFunc mocks the AddAndGetCheck method.
	AddAndGetCheckFunc func(name string, checker healthcheck.Checker) (*healthcheck.Check, error)

	// HandlerFunc mocks the Handler method.
	HandlerFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// StartFunc mocks the Start method.
	StartFunc func(contextMoqParam context.Context)

	// StopFunc mocks the Stop method.
	StopFunc func()

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(subscriber healthcheck.Subscriber, checks ...*healthcheck.Check)

	// calls tracks calls to the methods.
	calls struct {
		// AddAndGetCheck holds details about calls to the AddAndGetCheck method.
		AddAndGetCheck []struct {
			// Name is the name argument value.
			Name string
			// Checker is the checker argument value.
			Checker healthcheck.Checker
		}
		// Handler holds details about calls to the Handler method.
		Handler []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Subscriber is the subscriber argument value.
			Subscriber healthcheck.Subscriber
			// Checks is the checks argument value.
			Checks []*healthcheck.Check
		}
	}
	lockAddAndGetCheck sync.RWMutex
	lockHandler        sync.RWMutex
	lockStart          sync.RWMutex
	lockStop           sync.RWMutex
	lockSubscribe      sync.RWMutex
}

// AddAndGetCheck calls AddAndGetCheckFunc.
func (mock *HealthCheckerMock) AddAndGetCheck(name string, checker healthcheck.Checker) (*healthcheck.Check, error) {
	if mock.AddAndGetCheckFunc == nil {
		panic("HealthCheckerMock.AddAndGetCheckFunc: method is nil but HealthChecker.AddAndGetCheck was just called")
	}
	callInfo := struct {
		Name    string
		Checker healthcheck.Checker
	}{
		Name:    name,
		Checker: checker,
	}
	mock.lockAddAndGetCheck.Lock()
	mock.calls.AddAndGetCheck = append(mock.calls.AddAndGetCheck, callInfo)
	mock.lockAddAndGetCheck.Unlock()
	return mock.AddAndGetCheckFunc(name, checker)
}

// AddAndGetCheckCalls gets all the calls that were made to AddAndGetCheck.
// Check the length with:
//     len(mockedHealthChecker.AddAndGetCheckCalls())
func (mock *HealthCheckerMock) AddAndGetCheckCalls() []struct {
	Name    string
	Checker healthcheck.Checker
} {
	var calls []struct {
		Name    string
		Checker healthcheck.Checker
	}
	mock.lockAddAndGetCheck.RLock()
	calls = mock.calls.AddAndGetCheck
	mock.lockAddAndGetCheck.RUnlock()
	return calls
}

// Handler calls HandlerFunc.
func (mock *HealthCheckerMock) Handler(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.HandlerFunc == nil {
		panic("HealthCheckerMock.HandlerFunc: method is nil but HealthChecker.Handler was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockHandler.Lock()
	mock.calls.Handler = append(mock.calls.Handler, callInfo)
	mock.lockHandler.Unlock()
	mock.HandlerFunc(responseWriter, request)
}

// HandlerCalls gets all the calls that were made to Handler.
// Check the length with:
//     len(mockedHealthChecker.HandlerCalls())
func (mock *HealthCheckerMock) HandlerCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockHandler.RLock()
	calls = mock.calls.Handler
	mock.lockHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *HealthCheckerMock) Start(contextMoqParam context.Context) {
	if mock.StartFunc == nil {
		panic("HealthCheckerMock.StartFunc: method is nil but HealthChecker.Start was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(contextMoqParam)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedHealthChecker.StartCalls())
func (mock *HealthCheckerMock) StartCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *HealthCheckerMock) Stop() {
	if mock.StopFunc == nil {
		panic("HealthCheckerMock.StopFunc: method is nil but HealthChecker.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedHealthChecker.StopCalls())
func (mock *HealthCheckerMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *HealthCheckerMock) Subscribe(subscriber healthcheck.Subscriber, checks ...*healthcheck.Check) {
	if mock.SubscribeFunc == nil {
		panic("HealthCheckerMock.SubscribeFunc: method is nil but HealthChecker.Subscribe was just called")
	}
	callInfo := struct {
		Subscriber healthcheck.Subscriber
		Checks     []*healthcheck.Check
	}{
		Subscriber: subscriber,
		Checks:     checks,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	mock.SubscribeFunc(subscriber, checks...)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedHealthChecker.SubscribeCalls())
func (mock *HealthCheckerMock) SubscribeCalls() []struct {
	Subscriber healthcheck.Subscriber
	Checks     []*healthcheck.Check
} {
	var calls []struct {
		Subscriber healthcheck.Subscriber
		Checks     []*healthcheck.Check
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
